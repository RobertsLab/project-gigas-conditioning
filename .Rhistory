<<<<<<< HEAD
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
BW <- ggplot(means_B_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
BH <- ggplot(means_B_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,50)
grid.arrange(BL,BW,BH)
B_noNT <- B_growth[B_growth$tag_num != "NT", ]
D_noNT <- D_growth[D_growth$tag_num != "NT", ]
means_B_sizes_noNT <- B_noNT %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
means_D_sizes_noNT <- D_noNT %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
DL2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning")+
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,40)
DW2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,40)
DH2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,40)
grid.arrange(DL2,DW2,DH2)
DL2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning")+
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,50)
grid.arrange(DL2,DW2,DH2)
BL2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
labs(color = "Conditioning")+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,40)
BW2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,40)
BH2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,40)
grid.arrange(BL2,BW2,BH2)
BL2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
labs(color = "Conditioning")+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BW2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BH2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,45)
grid.arrange(BL2,BW2,BH2)
DL <- ggplot(means_D_sizes, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "none")+
ylim(0,50)
DW <- ggplot(means_D_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH <- ggplot(means_D_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
theme(legend.position = "none")
ylim(0,50)
grid.arrange(DL,DW,DH)
DL <- ggplot(means_D_sizes, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW <- ggplot(means_D_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH <- ggplot(means_D_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,50)
grid.arrange(DL,DW,DH)
BL2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
labs(color = "Conditioning")+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BW2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BH2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,20)
grid.arrange(BL2,BW2,BH2)
DL2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning")+
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,20)
grid.arrange(DL2,DW2,DH2)
# B survival
B_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/B_survival_09122024.xlsx")
# D survival
D_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/D_survival_09122024.xlsx")
means_B_live <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_D_live <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_live <- rbind(means_B_live, means_D_live)
means_live$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_live$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_live, aes(x = date, y = mean_survival, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean live oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_survival-std_error, ymax=mean_survival+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
ggplot(D_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0, size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,120)
ggplot(B_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0,size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,55)
ggplot(B_survival, aes(x=date,y=dead, color=conditioning))+
geom_jitter(width = 0.2, height = 0.2, size = 3) +
theme_classic()+
ylab("Dead oysters found")+
xlab("Date")
B_survival <- B_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
D_survival <- D_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
B_survival <- B_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
D_survival <- D_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
ggplot(B_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.3) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))+
ylim(-0.5,6)
ggplot(D_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.2) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
means_B_cumdead <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_D_cumdead <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_cumdead <- rbind(means_B_cumdead, means_D_cumdead)
means_cumdead$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_B_cumdead <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_D_cumdead <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_cumdead <- rbind(means_B_cumdead, means_D_cumdead)
means_cumdead$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_cumdead$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_cumdead, aes(x = date, y = mean_cumdead, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean cumulative dead oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_cumdead-std_error, ymax=mean_cumdead+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
initial_counts <- B_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
B_survival <- B_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
B_survival <- B_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
initial_counts <- D_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
D_survival <- D_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
D_survival <- D_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
means_B_prop <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_D_prop <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_prop <- rbind(means_B_prop, means_D_prop)
means_prop$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_prop$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_prop, aes(x = date, y = mean_prop, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean proportion of oysters remaining per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
ggplot(D_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
ggplot(B_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))
=======
# Chunk 7
hist(data$length.mm)
hist(data$width.mm)
hist(data$depth.mm)
plot1<-data%>%
ggplot(aes(x=field_cattle_tag, y=length.mm, fill = treatment)) +
geom_boxplot(width=.5, outlier.shape= NA, position = position_dodge(width = 0.4)) +
geom_point(pch = 21, position=position_jitterdodge(dodge.width=0.4)) +
xlab("Bag") +
theme_classic(); plot1
plot2<-data%>%
ggplot(aes(x=field_cattle_tag, y=width.mm, fill = treatment)) +
geom_boxplot(width=.5, outlier.shape= NA, position = position_dodge(width = 0.4)) +
geom_point(pch = 21, position=position_jitterdodge(dodge.width=0.4)) +
xlab("Bag") +
theme_classic(); plot2
data$treatment
metadata
View(data)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(purrr)
library(lubridate)
library(ggplot2)
library(seacarb)
library(broom)
library(cowplot)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Ch: 1 - Temperature   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Ch: 1 - Temperature   (°C)`)
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Ch: 1 - Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Ch: 1 - Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%Y %H:%M:%S", tz="Pacific/Seattle")
?as.POSIXct
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%Y %H:%M:%S", tz="PDT")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%Y %H:%M:%S", tz="America/Seattle")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%Y %H:%M:%S", tz="America/Seattle")
View(tidbits)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%y %H:%M", tz="America/Seattle")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%y %H:%M", tz="America/Seattle")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%y %H:%M", tz="PDT")
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%y %H:%M")
levels(as.factor(tidbits$logger))
tidbit.files
tidbits <- tidbits %>%
mutate(group = case_when(
logger == "22023395" ~ "trays",
logger == "22023398" ~ "outdoor",
logger == "22023406" ~ "broodstock",
logger == "22023410" ~ "LCO",
TRUE ~ "other"  # Default for other values
))
levels(as.factor(tidbits$group))
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point()+
ylab("Temperature (°C)")+
xlab("Date Time")+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="outdoor")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="outdoor")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
#ylim(10,22)+
theme_classic(); temp_trays
temp_outdoor<-tidbits%>%
filter(group=="outdoor")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
library(tidyverse)
library(stringr)
library(readxl)
library(purrr)
library(lubridate)
library(ggplot2)
library(seacarb)
library(broom)
library(cowplot)
# Chunk 3
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
tidbits$DateTime<-as.POSIXct(tidbits$DateTime, format="%m/%d/%y %H:%M")
# Chunk 4
levels(as.factor(tidbits$logger))
# Chunk 5
tidbits <- tidbits %>%
mutate(group = case_when(
logger == "22023395" ~ "trays",
logger == "22023398" ~ "outdoor",
logger == "22023406" ~ "broodstock",
logger == "22023410" ~ "LCO",
TRUE ~ "other"  # Default for other values
))
levels(as.factor(tidbits$group))
# Chunk 6
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
filter(group=="trays")
temp_outdoor<-tidbits%>%
filter(group=="outdoor")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
#ylim(10,22)+
theme_classic(); temp_outdoor
View(tidbits)
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
View(tidbits)
#format date for trays logger, formatted differently
trays<-tidbits%>%
filter(logger=="22023395")
other<-tidbits%>%
filter(!logger=="22023395")
trays$DateTime<-as.POSIXct(trays$DateTime, format="%m/%d/%y %H:%M")
other$DateTime<-as.POSIXct(other$DateTime, format="%m/%d/%Y %H:%M:%S")
View(other)
View(trays)
tidbits<-rbind(trays,other)
View(tidbits)
levels(as.factor(tidbits$logger))
tidbits <- tidbits %>%
mutate(group = case_when(
logger == "22023395" ~ "trays",
logger == "22023398" ~ "outdoor",
logger == "22023406" ~ "broodstock",
logger == "22023410" ~ "LCO",
TRUE ~ "other"  # Default for other values
))
levels(as.factor(tidbits$group))
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,22)+
theme_classic(); temp_trays
temp_outdoor<-tidbits%>%
filter(group=="outdoor")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
#ylim(10,22)+
theme_classic(); temp_outdoor
temp_outdoor<-tidbits%>%
filter(group=="outdoor")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,30)+
theme_classic(); temp_outdoor
temp_trays<-tidbits%>%
filter(group=="trays")%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,30)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour="group"))+
geom_point()+
geom_smooth())+
temp_trays<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour="group"))+
geom_point()+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,30)+
theme_classic(); temp_trays
temp_trays<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group))+
geom_point()+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,30)+
theme_classic(); temp_trays
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group))+
geom_point()+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(10,32)+
theme_classic(); temp_plot
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group))+
geom_point()+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); temp_plot
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group, fill=group))+
geom_point()+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); temp_plot
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group, fill=group))+
geom_point(alpha=0.7)+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); temp_plot
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group, fill=group))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); temp_plot
ggsave(temp_plot, filename="figures/environmental/point-whitney-loggers.png", width=6, height=4)
westcott.files <- list.files(path="data/environmental/loggers/westcottloggers_20240913/", pattern="*.xlsx", full.names=TRUE)
#will need to change to HST time
westcott <- setNames(westcott.files, westcott.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#will need to change to HST time
westcott <- setNames(westcott.files, westcott.files) %>%
map_dfr(read_xlsx, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
View(westcott)
westcott$DateTime<-as.POSIXct(westcott$DateTime, format="%m/%d/%Y %H:%M:%S")
levels(as.factor(westcott$logger))
westcott <- westcott %>%
mutate(group = c("Westcott"))
levels(as.factor(westcott$group))
westcott_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,40)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); westcott_plot
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=6, height=4)
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=6, height=4)
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=8, height=4)
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=8, height=6)
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=10, height=6)
goose.files <- list.files(path="data/environmental/loggers/goose_point/", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#will need to change to HST time
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp  (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#will need to change to HST time
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#will need to change to HST time
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
View(goose)
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S")
levels(as.factor(goose$logger))
goose <- goose %>%
mutate(group = c("Goose Point"))
levels(as.factor(goose$group))
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
ggsave(goose_plot, filename="figures/environmental/goose-loggers.png", width=10, height=6)
>>>>>>> ebb23309a276320896ca0b2912eb9c5565f21b53
