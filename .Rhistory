# weighted model does not provide a better fit than first model (standard error increased, not much change in R squared)
# wt <- 1 / lm(abs(model2$residuals) ~ model2$fitted.values)$fitted.values^2
# wls_model2 <- lm( log(height.mm)~ length.mm+date_numeric, growth, weights=wt)
# summary(wls_model2)
# bptest(wls_model2)
## Successful model!
model3 <- lm(sqrt(width.mm)~length.mm+date_numeric, growth)
summary(model3)
plot(fitted(model3), residuals(model3),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqPlot(model3)
hist(residuals(model3))
bptest(model3)
# p = 0.03978
#made data more heteroskedastic somehow
# wt <- 1 / lm(abs(model3$residuals) ~ model3$fitted.values)$fitted.values^2
# wls_model3 <- lm(sqrt(width.mm)~ length.mm+date_numeric, growth, weights=wt)
# summary(wls_model3)
growth$volume <- (4/3) * pi * (growth$length.mm/2) * (growth$width.mm/2) * (growth$height.mm/2) * (1/2)
growth$conditioning <- gsub("weekly", "treated", growth$conditioning)
growth$conditioning <- gsub("daily", "treated", growth$conditioning)
growth$tag_num <- as.factor(growth$tag_num)
growth$bag_num <- as.factor(growth$bag_num)
model <- lmer(log(volume) ~  effort/conditioning * date_numeric + (1 | bag_num/tag_num), data = growth)
summary(model)
anova(model)
qqPlot(residuals(model))
plot(fitted(model), residuals(model))
abline(h = 0, col = "red")
means_sizes <- growth %>%
group_by(effort, conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
length <- ggplot(means_sizes, aes(x = date, y = mean_length, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,50)
width <- ggplot(means_sizes, aes(x = date, y = mean_width, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,50)
height <- ggplot(means_sizes, aes(x = date, y = mean_height, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size = 18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,20)
grid.arrange(length,width,height)
length <- ggplot(means_sizes, aes(x = date, y = mean_length, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,80)
width <- ggplot(means_sizes, aes(x = date, y = mean_width, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,80)
height <- ggplot(means_sizes, aes(x = date, y = mean_height, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size = 18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,40)
grid.arrange(length,width,height)
ggplot(aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
growth %>%
filter(effort == "B") %>%
ggplot(aes(x=length.mm, y= volume, color = date))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
growth %>%
filter(effort == "B", date == "2024-06-10") %>%
ggplot(aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
ylim(0,8200)+
xlim(0,65)
growth %>%
filter(effort == "B", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
ylim(0,8200)+
xlim(0,65)
growth %>%
filter(effort == "B", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
growth %>%
filter(effort == "B", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
xlim(0,90)
growth %>%
filter(effort == "D") %>%
ggplot(aes(x=length.mm, y= volume, color = date))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
ylim(0,15100)+
xlim(0,65)
growth %>%
filter(effort == "D") %>%
ggplot(aes(x=length.mm, y= volume, color = date))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
growth %>%
filter(effort == "D", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
growth %>%
filter(effort == "D", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
xlim(0,80)
growth %>%
filter(effort == "D", date == "2024-12-17") %>%
ggplot(aes(x=length.mm, y= volume, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
xlim(0,90)
# Non Linear model predicting log volume from length
model <- nls(log(volume) ~ a*length.mm^b, data = growth, start = list(a = 6.8, b = 1.1))
summary(model)
modelr::rsquare(model, growth)
plot(model)
# Extracting coefficients
coef_est <- coef(model)
cov_matrix <- vcov(model)
# Calculate standard errors for predictions
growth$predicted <- predict(model)
se_pred <- numeric(length(growth$predicted))
for (i in 1:length(growth$predicted)) {
x_val <- growth$length.mm[i]
# Jacobian for the prediction
jacobian <- c(x_val^coef_est["b"], coef_est["a"] * log(x_val) * x_val^coef_est["b"])
se_pred[i] <- sqrt(t(jacobian) %*% cov_matrix %*% jacobian)
}
# Calculate the confidence intervals
alpha <- 0.05  # significance level for 95% CI
z_value <- qnorm(1 - alpha / 2)  # Z value for the normal distribution
# Compute confidence intervals
growth$lower_ci <- growth$predicted - z_value * se_pred
growth$upper_ci <- growth$predicted + z_value * se_pred
# Graph Length to log volume with model line
ggplot(growth, aes(x = length.mm, y = log(volume))) +
geom_point(color = "blue", size = 2) +
geom_line(aes(y = predicted), color = "red", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci),alpha = 0.2, fill = "purple")+
labs(x = "length",
y = "volume") +
theme_classic()
# Graph actual log volume versus predicted log volume
ggplot(growth, aes(x = log(volume), y = predicted)) +
geom_point(color = "blue", size = 2) +
labs(x = "Log volume",
y = "Predicted log volume") +
geom_smooth(method='lm', color = "red")+
theme_classic()
means_vols <- growth %>%
group_by(effort, conditioning, date, bag_num) %>%
summarise(mean_vol = mean(volume),
std_error = sd(volume)/sqrt(length(volume)),
.groups = 'drop')
means_vols <- means_vols %>%
group_by(bag_num) %>%
mutate(initial_vol = first(mean_vol)) %>%
ungroup()
means_vols <- means_vols %>%
mutate(perc_change_vol = 100*(mean_vol-initial_vol)/initial_vol )
means_perc_vols <- means_vols %>%
group_by(effort, conditioning, date) %>%
summarise(mean_perc_vol = mean(perc_change_vol),
std_error = sd(perc_change_vol),
.groups = 'drop')
means_perc_vols$date <- as.POSIXct(means_perc_vols$date)
ggplot(means_perc_vols, aes(x = date, y = mean_perc_vol, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_perc_vol-std_error, ymax = mean_perc_vol+std_error), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
means_vols %>%
filter(effort == "D") %>%
ggplot(aes(x=date, y= perc_change_vol, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Date", y = "Percent change volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
means_vols %>%
filter(effort == "B") %>%
ggplot(aes(x=date, y= perc_change_vol, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Date", y = "Percent change volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
means_vols %>%
filter(effort == "B") %>%
ggplot(aes(x=date, y= mean_vol, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Date", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
means_vols %>%
filter(effort == "D") %>%
ggplot(aes(x=date, y= mean_vol, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Date", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
ggplot(means_perc_vols, aes(x = date, y = log(mean_perc_vol), color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
ggplot(means_perc_vols, aes(x = date, y = log(mean_perc_vol), color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
means_vols$date <- as.POSIXct(means_vols$date)
means_vols$bag_num <- as.factor(means_vols$bag_num)
model <- lmer(log(perc_change_vol) ~  effort/conditioning *date + (1|bag_num), data = means_vols)
View(growth)
model <- lmer(log(perc_change_vol) ~  effort/conditioning *date + (1|bag_num), data = means_vols)
View(means_vols)
means_vols$days <- as.numeric(means_vols$date - min(means_vols$date))
means_vols <- subset(means_vols, date != "2024-06-10")
model.m<-glmmTMB(sqrt(perc_change_vol) ~  effort/conditioning *days+ (1|bag_num),data = means_vols, family = gaussian()) #glmmTMB
summary(model.m)
car::Anova(model.m, type = "III")
model.b<- lmer(sqrt(perc_change_vol) ~  effort/conditioning *days + (1|bag_num), data = means_vols)
summary(model.b)
qqnorm(resid(model.b))
qqline(resid(model.b))
testDispersion(model.m)
tst_simres <- simulateResiduals(fittedModel = model.m) #DHARMa
plot(tst_simres)
hist(means_vols$perc_change_vol)
hist(log(means_vols$perc_change_vol))
hist(sqrt(means_vols$perc_change_vol))
means_vols <- subset(means_vols, date != "2024-06-10")
plot(means_vols$date, log(means_vols$perc_change_vol))
means_vols$days <- as.numeric(means_vols$date - min(means_vols$date))
means_vols$days <- as.numeric(means_vols$date - min(means_vols$date))
means_vols$days <- means_vols$days/(60*60*24)
means_vols <- subset(means_vols, date != "2024-06-10")
means_vols <- subset(means_vols, days != 0)
model.m<-glmmTMB(log(perc_change_vol) ~  effort/conditioning *days+ (1|bag_num),data = means_vols, family = gaussian()) #glmmTMB
summary(model.m)
car::Anova(model.m, type = "III")
model.b<- lmer(sqrt(perc_change_vol) ~  effort/conditioning *days + (1|bag_num), data = means_vols)
summary(model.b)
qqnorm(resid(model.b))
qqline(resid(model.b))
qqnorm(resid(model.b))
qqline(resid(model.b))
testDispersion(model.m)
tst_simres <- simulateResiduals(fittedModel = model.m) #DHARMa
plot(tst_simres)
model.m<-glmmTMB(log(perc_change_vol) ~  effort/conditioning *days+ (1|bag_num),data = means_vols, family = gaussian()) #glmmTMB
testDispersion(model.m)
tst_simres <- simulateResiduals(fittedModel = model.m) #DHARMa
plot(tst_simres)
testDispersion(model.b)
tst_simres <- simulateResiduals(fittedModel = model.b) #DHARMa
plot(tst_simres)
testDispersion(model.m)
tst_simres <- simulateResiduals(fittedModel = model.m) #DHARMa
plot(tst_simres)
testDispersion(model.b)
tst_simres <- simulateResiduals(fittedModel = model.b) #DHARMa
plot(tst_simres)
testDispersion(model.m)
tst_simres <- simulateResiduals(fittedModel = model.m) #DHARMa
plot(tst_simres)
testDispersion(model.b)
tst_simres <- simulateResiduals(fittedModel = model.b) #DHARMa
plot(tst_simres)
means_perc_vols <- means_vols %>%
group_by(effort, conditioning, date) %>%
summarise(mean_perc_vol = mean(perc_change_vol),
std_error = sd(perc_change_vol)/sqrt(length(perc_change_vol)),
.groups = 'drop')
means_perc_vols <- means_vols %>%
group_by(effort, conditioning, date) %>%
summarise(mean_perc_vol = mean(perc_change_vol),
std_error = sd(perc_change_vol)/sqrt(length(perc_change_vol)),
.groups = 'drop')
means_perc_vols$date <- as.POSIXct(means_perc_vols$date)
ggplot(means_perc_vols, aes(x = date, y = mean_perc_vol, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_perc_vol-std_error, ymax = mean_perc_vol+std_error), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
install.packages("emmeans")
library(emmeans)
emm_interaction <- emmeans(model.b, ~ effort * conditioning | days)
emm_interaction
# Pairwise comparisons for interaction
pairs(emm_interaction, by = "days")  # Compare effort * conditioning combinations within days
install.packages("emmeans")
# Pairwise comparisons for interaction
pairs(emm_interaction, by = "days", adjust= "tukey")  # Compare effort * conditioning combinations within days
emm_interaction <- emmeans(model.b, ~ effort * conditioning | days)
emm_interaction
emm_interaction <- emmeans(model.b, ~ effort * conditioning | days)
emm_interaction
# Pairwise comparisons for interaction
pairs(emm_interaction, by = "days", adjust= "tukey")  # Compare effort * conditioning combinations within days
