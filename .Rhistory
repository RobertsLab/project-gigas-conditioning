<<<<<<< HEAD
str(means_prop$date)
means_prop$days <- means_prop$days/86400
means_prop$days <- means_prop$days + 10
means_prop$days <- means_prop$days + 3
model.m<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
library(DHARMa)
library(glmmTMB)
p
model.m<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
survival$date <- as.POSIXct(survival$date)
survival$days <- as.numeric(survival$date - min(survival$date))
means_prop$days <- means_prop$days/86400
survival$days <- survival$days/86400
survival$days <- survival$days + 13
survival <- subset(survival, date > "2024-07-17")
model.m<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
summary(model.m)
testDispersion(model.m)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
hist(survival$proportion_remaining)
model.s<-glmmTMB(log(proportion_remaining) ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(sqrt(proportion_remaining) ~  effort/conditioning *days + (1|bag_num),  data = survival,family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
hist(survival$proportion_remaining)
plot(tst_simres)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = Gamma()) #glmmTMB
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = Gamma(link = "inverse")) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
ggplot(means_perc_vols, aes(x = date, y = log(mean_perc_vol), color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
means_perc_vols <- means_vols %>%
group_by(effort, conditioning, date) %>%
summarise(mean_perc_vol = mean(perc_change_vol),
std_error = sd(perc_change_vol),
.groups = 'drop')
means_perc_vols$date <- as.POSIXct(means_perc_vols$date)
ggplot(means_perc_vols, aes(x = date, y = mean_perc_vol, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_perc_vol-std_error, ymax = mean_perc_vol+std_error), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
ggplot(means_perc_vols, aes(x = date, y = log(mean_perc_vol), color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change in volume") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(
axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
hist(log(survival$proportion_remaining))
hist(sqrt(survival$proportion_remaining))
hist((survival$proportion_remaining))
hist(log(survival$proportion_remaining))
hist(sqrt(survival$proportion_remaining))
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = nbinom1()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = nbinom12()) #glmmTMB
summary(model.s)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = nbinom12()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = truncated_nbinom1()) #glmmTMB
summary(model.s)
testDispersion(model.s)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = truncated_nbinom2()) #glmmTMB
summary(model.s)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = beta) #glmmTMB
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = beta()) #glmmTMB
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = tweedie()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = t_family) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = skewnormal()) #glmmTMB
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = skewnormal()) #glmmTMB
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning *days + (1|bag_num),  data = survival,family = skewnormal()) #glmmTMB
ggplot(means_prop, aes(x = date, y = mean_prop, color = effort)) +
geom_point(size=3) +
geom_line(aes(linetype = conditioning))+
labs(x = "Date",
y = "Proportion survival (Oysters left / Starting # oysters)") +
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple", "forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(axis.text = element_text(size = 18, color= "black"),
axis.title = element_text(size = 20, color= "black"),
legend.text = element_text(size = 18, color= "black"),
legend.title = element_text(size = 20, color= "black"))
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning*days + (1|bag_num),  data = survival,family = compois()) #glmmTMB
summary(model.s)
testDispersion(model.s)
model.s<-glmmTMB(proportion_remaining ~  effort/conditioning*days + (1|bag_num),  data = survival,family = genpois()) #glmmTMB
summary(model.s)
model.s<-glmmTMB(log(1.05-proportion_remaining)) ~  effort/conditioning*days + (1|bag_num),  data = survival,family = genpois()) #glmmTMB
model.s<-glmmTMB(log(1.05-proportion_remaining)) ~  effort/conditioning*days + (1|bag_num),  data = survival,family = beta()) #glmmTMB
survival$prop_remaining_adjusted <- log(1.05-survival$proportion_remaining)
hist(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = beta()) #glmmTMB
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
hist(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = t_family()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = Gamma()) #glmmTMB
hist(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = nbinom1()) #glmmTMB
hist(survival$prop_remaining_adjusted)
survival$prop_remaining_adjusted <- log(1.05-survival$proportion_remaining) + 4.7
hist(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = Gamma()) #glmmTMB
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = nbinom1()) #glmmTMB
summary(model.s)
testDispersion(model.s)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = nbinom2()) #glmmTMB
boxplot(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = t_family()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = lognormal()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
install.packages("fitdistrplus")
library(fitdistrplus)
# Fit Gamma and Weibull distributions
fit_gamma <- fitdist(survival$prop_remaining_adjusted, "gamma")
fit_weibull <- fitdist(survival$prop_remaining_adjusted, "weibull")
# Compare fits
summary(fit_gamma)
summary(fit_weibull)
plot(fit_gamma)
plot(fit_weibull)
install.packages("fitdistrplus")
library(fitdistrplus)
# Example data
# Fit Gamma and Weibull distributions
fit_gamma <- fitdist(survival$prop_remaining_adjusted, "gamma")
fit_weibull <- fitdist(survival$prop_remaining_adjusted, "weibull")
# Compare fits
summary(fit_gamma)
summary(fit_weibull)
plot(fit_gamma)
plot(fit_weibull)
install.packages("fitdistrplus")
fit_t <- fitdist(survival$prop_remaining_adjusted, "lognormal")
fit_t <- fitdist(survival$prop_remaining_adjusted, "lnorm")
plot(fit_t)
plot(fit_gamma)
plot(fit_weibull)
plot(fit_t)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
car::Anova(model.s, type = "III")
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = lognormal()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = cauchy()) #glmmTMB
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = cauchy()) #glmmTMB
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = tweedie()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
hist(survival$prop_remaining_adjusted)
hist(survival$proportion_remaining)
hist(survival$prop_remaining_adjusted)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
car::Anova(model.s, type = "III")
car::Anova(model.s, type = "III")
survival2 <- subset(survival, bag_num != 22)
model.s<-glmmTMB(prop_remaining_adjusted ~  effort/conditioning*days + (1|bag_num),  data = survival2, family = gaussian()) #glmmTMB
hist(survival2$proportion_remaining)
hist(survival2$prop_remaining_adjusted)
boxplot(survival2$prop_remaining_adjusted)
model.s<-glmmTMB(proportion_remaining~  effort/conditioning*days + (1|bag_num),  data = survival2, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
car::Anova(model.s, type = "III")
means_prop %>%
filter(date > "2024-07-08")%>%
ggplot(aes(x = date, y = mean_prop, color = effort)) +
geom_point(size=3) +
geom_line(aes(linetype = conditioning))+
labs(x = "Date",
y = "Proportion survival (Oysters left / Starting # oysters)") +
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple", "forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(axis.text = element_text(size = 18, color= "black"),
axis.title = element_text(size = 20, color= "black"),
legend.text = element_text(size = 18, color= "black"),
legend.title = element_text(size = 20, color= "black"))+
ylim(0, 1.03)
library(readxl)
=======
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
goose$DateTime
?as.POSIXct
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S", tz="PDT")
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S", tz="PST")
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S", tz="UTC")
goose.files <- list.files(path="data/environmental/loggers/goose_point", pattern="*.csv", full.names=TRUE)
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S", tz="UTC")
levels(as.factor(goose$logger))
goose <- goose %>%
mutate(group = c("Goose Point"))
levels(as.factor(goose$group))
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
goose$DateTime
goose.files <- list.files(path="data/environmental/loggers/goose_point", pattern="*.csv", full.names=TRUE)
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S")
goose$DateTime
goose.files <- list.files(path="data/environmental/loggers/goose_point", pattern="*.csv", full.names=TRUE)
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
goose$DateTime
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%Y %H:%M:%S")
goose$DateTime
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
goose$DateTime
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%y %H:%M")
goose$DateTime
levels(as.factor(goose$logger))
goose <- goose %>%
mutate(group = c("Goose Point"))
levels(as.factor(goose$group))
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-09-09", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
filter(!as.Date(DateTime) %in% dates_to_filter)
goose_plot<-test%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
View(test)
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-09-09", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
filter(!(as.Date(DateTime, tz = "PDT") %in% dates_to_filter))
# Filter out rows with specified dates
test <- goose %>%
filter(!(as.Date(date_column) %in% dates_to_filter))
# Filter out rows with specified dates
test <- goose %>%
filter(!(as.Date(DateTime) %in% dates_to_filter))
test <- goose %>%
mutate(day=as.Date(DateTime))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-06-25", "2024-09-09", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-06-25", "2024-09-09", "2024-09-10", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
goose_plot<-test%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-06-25", "2024-06-26", "2024-06-27", "2024-09-09", "2024-09-10", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
goose_plot<-test%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
ggsave(goose_plot, filename="figures/environmental/goose-loggers.png", width=10, height=6)
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-24", "2024-06-25", "2024-09-09", "2024-09-10", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
goose_plot<-test%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
# Dates to filter out
dates_to_filter <- as.Date(c("2024-06-19", "2024-06-20", "2024-06-21", "2024-06-22", "2024-06-23", "2024-06-24", "2024-06-25", "2024-09-09", "2024-09-10", "2024-12-11"))
# Filter out rows with specified dates
test <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
goose_plot<-test%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
# Filter out rows with specified dates
goose <- goose %>%
mutate(day=as.Date(DateTime))%>%
filter(!day %in% dates_to_filter)
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); goose_plot
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,40)+
theme_classic(); goose_plot
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,40)+
theme_classic(); goose_plot
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C, fill=logger))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,40)+
theme_classic(); goose_plot
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,40)+
theme_classic(); goose_plot
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date")+
ylim(0,40)+
theme_classic(); goose_plot
#calculate min and max of each day and plot this difference over time
daily_goose<-goose%>%
group_by(logger, day)
daily_goose
#calculate min and max of each day and plot this difference over time
daily_goose<-goose%>%
group_by(logger, day, group)%>%
summarise(min=min(temp.C), max=max(temp.C))
daily_goose
#calculate min and max of each day and plot this difference over time
daily_goose<-goose%>%
group_by(logger, day, group)%>%
summarise(min=min(temp.C), max=max(temp.C))%>%
mutate(diff=max-min)
daily_goose
goose_plot2<-goose_daily%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,40)+
theme_classic(); goose_plot2
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,40)+
theme_classic(); goose_plot2
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot2
ggsave(goose_plot, filename="figures/environmental/goose-loggers_daily-range.png", width=10, height=6)
ggsave(goose_plot, filename="figures/environmental/goose-loggers.png", width=10, height=6)
#calculate min and max of each day and plot this difference over time
variability_goose<-goose%>%
group_by(logger, day, group)%>%
summarise(sd=sd(temp.C))
variability_goose
goose_plot3<-variability_goose%>%
ggplot(aes(x=day, y=sd))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Variability (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot3
goose_plot3<-variability_goose%>%
ggplot(aes(x=day, y=sd))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Variability (°C)")+
xlab("Date")+
ylim(0,5)+
theme_classic(); goose_plot3
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot2
goose_plot3<-variability_goose%>%
ggplot(aes(x=day, y=sd))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Variability (°C)")+
xlab("Date")+
ylim(0,5)+
theme_classic(); goose_plot3
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black")+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot2
ggsave(goose_plot, filename="figures/environmental/goose-loggers_daily-range.png", width=10, height=6)
ggsave(goose_plot2, filename="figures/environmental/goose-loggers_daily-range.png", width=10, height=6)
ggsave(goose_plot2, filename="figures/environmental/goose-loggers_daily-range.png", width=8, height=6)
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black", se=FALSE)+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot2
goose_plot<-goose%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black", se=FALSE)+
ylab("Temperature (°C)")+
xlab("Date")+
ylim(0,40)+
theme_classic(); goose_plot
ggsave(goose_plot, filename="figures/environmental/goose-loggers.png", width=10, height=6)
#calculate min and max of each day and plot this difference over time
daily_goose<-goose%>%
group_by(logger, day, group)%>%
summarise(min=min(temp.C), max=max(temp.C))%>%
mutate(diff=max-min)
goose_plot2<-daily_goose%>%
ggplot(aes(x=day, y=diff))+
geom_point(alpha=0.7, colour="darkgray")+
geom_smooth(colour="black", se=FALSE)+
ylab("Daily Temperature Range (°C)")+
xlab("Date")+
ylim(0,20)+
theme_classic(); goose_plot2
ggsave(goose_plot2, filename="figures/environmental/goose-loggers_daily-range.png", width=8, height=6)
#export data
goose%>%
select(!day)
#export data
goose%>%
select(!day)%>%
select(!group)
#export data
goose%>%
select(!day)%>%
select(!group)%>%
write_csv("output/environmental/goose-point-temperature-data.csv")
goose.files <- list.files(path="data/environmental/loggers/goose_point", pattern="*.csv", full.names=TRUE)
goose <- setNames(goose.files, goose.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temp (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#export data
goose%>%
write_csv("output/environmental/goose-point-temperature-data.csv")
goose$DateTime<-as.POSIXct(goose$DateTime, format="%m/%d/%y %H:%M")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
>>>>>>> 8fb12ce28d8cea6f8ba367c7a1bb1c3bf92329a5
library(tidyverse)
library(stringr)
library(readxl)
library(purrr)
library(lubridate)
library(ggplot2)
<<<<<<< HEAD
library(DHARMa)
library(glmmTMB)
means_prop %>%
filter(date > "2024-07-08")%>%
ggplot(aes(x = date, y = mean_prop, color = effort)) +
geom_point(size=3) +
geom_line(aes(linetype = conditioning))+
labs(x = "Date",
y = "Proportion survival (Oysters left / Starting # oysters)") +
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple", "forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(axis.text = element_text(size = 18, color= "black"),
axis.title = element_text(size = 20, color= "black"),
legend.text = element_text(size = 18, color= "black"),
legend.title = element_text(size = 20, color= "black"))+
ylim(0, 1.03)
hist(survival2$proportion_remaining)
hist(survival2$prop_remaining_adjusted)
boxplot(survival$prop_remaining_adjusted)
hist(survival$prop_remaining_adjusted)
model.s<-glmmTMB(prop_remaining_adjusted~  effort/conditioning*days + (1|bag_num),  data = survival, family = gaussian()) #glmmTMB
summary(model.s)
testDispersion(model.s)
tst_simres <- simulateResiduals(fittedModel = model.s) #DHARMa
plot(tst_simres)
hist(1.05-survival$proportion_remaining)
means_sizes <- growth %>%
group_by(effort, conditioning, date, bag_num) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(car)
install.packages("lmerTest")
library(lmerTest)
install.packages("modelr")
library(modelr)
install.packages("glmmTMB")
library(glmmTMB)#follows lme4 syntax
install.packages("DHARMa")
library(DHARMa)
install.packages("modelr")
install.packages("glmmTMB")
install.packages("DHARMa")
install.packages("lmerTest")
install.packages("DHARMa")
means_sizes <- growth %>%
group_by(effort, conditioning, date, bag_num) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
View(means_sizes)
means_sizes <- means_sizes %>%
group_by(bag_num) %>%
mutate(initial_length = first(mean_length)) %>%
mutate(initial_width = first(mean_width)) %>%
mutate(initial_height = first(mean_height)) %>%
ungroup()
means_sizes <- means_sizes %>%
mutate(perc_change_length = 100*(mean_length-initial_length)/initial_length ) %>%
mutate(perc_change_width = 100*(mean_width-initial_width)/initial_width ) %>%
mutate(perc_change_height = 100*(mean_height-initial_height)/initial_height )
means_sizes %>%
filter(effort == "D") %>%
ggplot(aes(x=date, y= perc_change_length, color = conditioning))+
geom_point()+
theme_classic()+
labs(x = "Date", y = "Percent change length")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
means_perc_dimension <- means_sizes %>%
group_by(effort, conditioning, date) %>%
summarise(mean_perc_length = mean(perc_change_length),
std_error_length = sd(perc_change_length)/sqrt(length(perc_change_length)),
mean_perc_width = mean(perc_change_width),
std_error_width = sd(perc_change_width)/sqrt(length(perc_change_width)),
mean_perc_height = mean(perc_change_height),
std_error_height = sd(perc_change_height)/sqrt(length(perc_change_height)),
.groups = 'drop')
means_perc_dimension$date <- as.POSIXct(means_perc_dimension$date)
View(means_perc_dimension)
length <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_length, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change length") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_perc_length-std_error_length, ymax = mean_perc_length+std_error_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,50)
width <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_width, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change width") +
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_perc_width-std_error_width, ymax = mean_perc_width+std_error_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,50)
height <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_height, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change height") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
geom_errorbar(aes(ymin=mean_perc_height-std_error_height, ymax = mean_perc_height+std_error_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size = 18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))+
ylim(0,20)
grid.arrange(length,width,height)
length <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_length, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change length") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
geom_errorbar(aes(ymin=mean_perc_length-std_error_length, ymax = mean_perc_length+std_error_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
width <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_width, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change width") +
theme_classic()+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_perc_width-std_error_width, ymax = mean_perc_width+std_error_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
height <- ggplot(means_perc_dimension, aes(x = date, y = mean_perc_height, color = effort)) +
geom_point() +
geom_line(aes(linetype=conditioning))+
labs(x = "Date",
y = "Percent change height") +
labs(color = "Conditioning Type", linetype = "Treatment")+
theme_classic()+
geom_errorbar(aes(ymin=mean_perc_height-std_error_height, ymax = mean_perc_height+std_error_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple","forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
theme(axis.title.x = element_text(size = 20, color = "black"),
axis.text.x = element_text(size = 18, color = "black"),
axis.title.y = element_text(size = 20, color = "black"),
axis.text.y = element_text(size=18, color = "black"),
legend.text = element_text(size = 18, color = "black"),
legend.title = element_text(size = 20, color = "black"))
grid.arrange(length,width,height)
=======
library(seacarb)
library(broom)
library(cowplot)
# Chunk 3
tidbit.files <- list.files(path="data/environmental/loggers/point_whitney/for-analysis", pattern="*.csv", full.names=TRUE)
#will need to change to HST time
tidbits <- setNames(tidbit.files, tidbit.files) %>%
map_dfr(read_csv, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temp   (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
#format date for trays logger, formatted differently
trays<-tidbits%>%
filter(logger=="22023395")
other<-tidbits%>%
filter(!logger=="22023395")
trays$DateTime<-as.POSIXct(trays$DateTime, format="%m/%d/%y %H:%M")
other$DateTime<-as.POSIXct(other$DateTime, format="%m/%d/%Y %H:%M:%S")
tidbits<-rbind(trays,other)
# Chunk 4
levels(as.factor(tidbits$logger))
# Chunk 5
tidbits <- tidbits %>%
mutate(group = case_when(
logger == "22023395" ~ "trays",
logger == "22023398" ~ "outdoor",
logger == "22023406" ~ "broodstock",
logger == "22023410" ~ "LCO",
TRUE ~ "other"  # Default for other values
))
levels(as.factor(tidbits$group))
# Chunk 6
temp_plot<-tidbits%>%
ggplot(aes(x=DateTime, y=temp.C, colour=group, fill=group))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(8,32)+
theme_classic(); temp_plot
ggsave(temp_plot, filename="figures/environmental/point-whitney-loggers.png", width=6, height=4)
# Chunk 7
temp_plot<-tidbits%>%
filter(group %in% c("broodstock", "LCO", "outdoor"))%>%
filter(temp.C>15)%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="gray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date")+
ggtitle("3-holer tanks")+
ylim(8,32)+
theme_classic(); temp_plot
ggsave(temp_plot, filename="figures/environmental/3-holer-tanks-PW.png", width=6, height=4)
# Chunk 8
temp_plot<-tidbits%>%
filter(group %in% c("trays"))%>%
#filter(temp.C>15)%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="gray")+
geom_smooth(colour="black")+
ylab("Temperature (°C)")+
xlab("Date")+
ggtitle("Seed trays")+
geom_vline(xintercept=as.POSIXct("2024-08-05 15:45:00"), linetype="dashed", colour="black")+
geom_text(x=as.POSIXct("2024-07-01 15:45:00"), y=22, label="left stack")+
geom_text(x=as.POSIXct("2024-09-01 15:45:00"), y=22, label="right stack")+
ylim(8,25)+
theme_classic(); temp_plot
ggsave(temp_plot, filename="figures/environmental/seed-trays-PW.png", width=6, height=4)
westcott.files <- list.files(path="data/environmental/loggers/westcott/westcottloggers_20241217/", pattern="*.xlsx", full.names=TRUE)
#will need to change to HST time
westcott <- setNames(westcott.files, westcott.files) %>%
map_dfr(read_xlsx, .id = "logger") %>%
rename(DateTime=`Date-Time (PDT)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
westcott.files <- list.files(path="data/environmental/loggers/westcott/westcottloggers_20241217/", pattern="*.xlsx", full.names=TRUE)
#will need to change to HST time
westcott <- setNames(westcott.files, westcott.files) %>%
map_dfr(read_xlsx, .id = "logger") %>%
rename(DateTime=`Date-Time (PST)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
westcott.files <- list.files(path="data/environmental/loggers/westcott/westcottloggers_20241217/", pattern="*.xlsx", full.names=TRUE)
#will need to change to HST time
westcott <- setNames(westcott.files, westcott.files) %>%
map_dfr(read_xlsx, .id = "logger") %>%
rename(DateTime=`Date-Time (PST/PDT)`, temp.C=`Temperature (°C)`)%>%
select(!`#`)%>%
select(logger, DateTime, temp.C)%>%
mutate(logger=sub(".*/", "", logger))%>% #remove the path name
mutate(logger=sub("_.*", "", logger))%>% #keep only the serial number
filter(!temp.C=="NA")
westcott$DateTime<-as.POSIXct(westcott$DateTime, format="%m/%d/%Y %H:%M:%S")
levels(as.factor(westcott$logger))
westcott <- westcott %>%
mutate(group = c("Westcott"))
levels(as.factor(westcott$group))
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C, colour=logger, fill=logger))+
geom_point(alpha=0.7)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="black", fill="black")+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="darkgray", fill="darkgray")+
geom_smooth()+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); westcott_plot
westcott_plot<-westcott%>%
ggplot(aes(x=DateTime, y=temp.C))+
geom_point(alpha=0.7, colour="darkgray", fill="darkgray")+
geom_smooth(colour="black", se=FALSE)+
ylab("Temperature (°C)")+
xlab("Date Time")+
ylim(0,50)+
theme_classic(); westcott_plot
ggsave(westcott_plot, filename="figures/environmental/westcott-loggers.png", width=10, height=6)
>>>>>>> 8fb12ce28d8cea6f8ba367c7a1bb1c3bf92329a5
