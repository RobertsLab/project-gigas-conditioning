labs(x = "Date",
y = "Proportion survival (Oysters left / Starting # oysters)") +
scale_color_manual(labels = c("Daily", "Weekly"), values = c("purple", "forestgreen"))+
scale_linetype_manual(labels = c("Control", "Primed"), values = c("solid", "dashed"))+
labs(color = "Conditioning Type", linetype = "Treatment")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(axis.text = element_text(size = 18, color= "black"),
axis.title = element_text(size = 20, color= "black"),
legend.text = element_text(size = 18, color= "black"),
legend.title = element_text(size = 20, color= "black"))
summary(model)
library(readxl)
library(tidyverse)
library(ggplot2)
# B survival
B_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/B_survival_09122024.xlsx")
# D survival
D_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/D_survival_09122024.xlsx")
means_B_live <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_D_live <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_live <- rbind(means_B_live, means_D_live)
means_live$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_live$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_live, aes(x = date, y = mean_survival, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean live oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_survival-std_error, ymax=mean_survival+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
ggplot(D_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0, size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,120)
ggplot(B_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0,size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,55)
ggplot(B_survival, aes(x=date,y=dead, color=conditioning))+
geom_jitter(width = 0.2, height = 0.2, size = 3) +
theme_classic()+
ylab("Dead oysters found")+
xlab("Date")
ggplot(D_survival, aes(x=date, y=dead, color=conditioning))+
geom_jitter(width = 0.2, height = 0.2, size = 3) +
theme_classic()+
ylab("Dead oysters found")+
xlab("Date")
B_survival <- B_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
D_survival <- D_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
ggplot(B_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.3) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))+
ylim(-0.5,6)
ggplot(D_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.2) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
means_B_cumdead <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_D_cumdead <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_cumdead <- rbind(means_B_cumdead, means_D_cumdead)
means_cumdead$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_cumdead$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_cumdead, aes(x = date, y = mean_cumdead, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean cumulative dead oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_cumdead-std_error, ymax=mean_cumdead+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
initial_counts <- B_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
B_survival <- B_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
B_survival <- B_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
initial_counts <- D_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
D_survival <- D_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
D_survival <- D_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
means_B_prop <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_D_prop <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_prop <- rbind(means_B_prop, means_D_prop)
means_prop$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_prop$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_prop, aes(x = date, y = mean_prop, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Proportion survival (Oysters left / Starting # oysters)") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(axis.text = element_text(size = 18, color= "black"),
axis.title = element_text(size = 20, color= "black"),
legend.text = element_text(size = 18, color= "black"),
legend.title = element_text(size = 20, color= "black"))
ggplot(D_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
ggplot(B_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))
library(car)
survival <- rbind(B_survival, D_survival)
survival$conditioning <- gsub("daily", "treated", survival$conditioning)
survival$conditioning <- gsub("weekly", "treated", survival$conditioning)
modelsurv <- lmer(proportion_remaining ~  effort/conditioning + (1|bag_num),  data = survival)
library(car)
library(lme4)
modelsurv <- lmer(proportion_remaining ~  effort/conditioning + (1|bag_num),  data = survival)
summary(modelsurv)
qqPlot(residuals(modelsurv))
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# B survival
B_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/B_2023POGS_small_seed_daily/B_sizes_09132024.xlsx")
# Heights from bag 2 for 07/05/2024 showing up as NA's for some reason when data imported
B_growth$length.mm <- as.numeric(B_growth$length.mm)
B_growth$width.mm <- as.numeric(B_growth$width.mm)
B_growth$height.mm <- as.numeric(B_growth$height.mm)
B_growth <- B_growth %>% drop_na(length.mm, width.mm, height.mm)
# D survival
D_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/D_2023POGS_small_seed_weekly/D_sizes_09132024.xlsx")
D_growth <- D_growth %>% drop_na(length.mm, width.mm, height.mm)
ggplot(B_growth, aes(x=length.mm, y= height.mm))+
geom_point()+
theme_classic()
ggplot(D_growth, aes(x=length.mm, y= height.mm))+
geom_point()+
theme_classic()
means_B_sizes <- B_growth %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
means_D_sizes <- D_growth %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
DL <- ggplot(means_D_sizes, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW <- ggplot(means_D_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH <- ggplot(means_D_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,50)
grid.arrange(DL,DW,DH)
BL <- ggplot(means_B_sizes, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
BW <- ggplot(means_B_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
BH <- ggplot(means_B_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,50)
grid.arrange(BL,BW,BH)
B_noNT <- B_growth[B_growth$tag_num != "NT", ]
D_noNT <- D_growth[D_growth$tag_num != "NT", ]
means_B_sizes_noNT <- B_noNT %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
means_D_sizes_noNT <- D_noNT %>%
group_by(conditioning, date) %>%
summarise(mean_length = mean(length.mm, na.rm = TRUE),
mean_width = mean(width.mm, na.rm = TRUE),
mean_height = mean(height.mm, na.rm = TRUE),
stderr_length = sd(length.mm, na.rm = TRUE)/sqrt(length(length.mm)),
stderr_width = sd(width.mm, na.rm = TRUE)/sqrt(length(width.mm)),
stderr_height = sd(height.mm, na.rm = TRUE)/sqrt(length(height.mm)),
.groups = 'drop')
DL2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning")+
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,20)
grid.arrange(DL2,DW2,DH2)
BL2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
labs(color = "Conditioning")+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BW2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BH2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,20)
grid.arrange(BL2,BW2,BH2)
growth$volume <- (4/3) * pi * (growth$length.mm/2) * (growth$width.mm/2) * (growth$height.mm/2)
growth$conditioning <- gsub("weekly", "treated", growth$conditioning)
growth$conditioning <- gsub("daily", "treated", growth$conditioning)
View(growth)
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(car)
install.packages("lmerTest")
library(lmerTest)
install.packages("lmerTest")
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x)
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x^2)
growth$volume <- (4/3) * pi * (growth$length.mm/2) * (growth$width.mm/2) * (growth$height.mm/2) * (1/2)
ggplot(growth, aes(x=length.mm, y= volume))+
geom_point()+
theme_classic()+
labs(x = "Length (mm)", y = "Volume")+
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 20))+
geom_smooth(method = "", se=FALSE, color="black", formula = y ~ x^2)
model <- nls(volume ~ a*length^b, data = growth, start = list(a = 6.8, b = .3))
model <- nls(volume ~ a*length.mm^b, data = growth, start = list(a = 6.8, b = .3))
model <- nls(volume ~ a*length.mm^b, data = growth, start = list(a = 6.8, b = 1.1  ))
summary(model)
plot(model)
model <- nls(log(volume) ~ a*length.mm^b, data = growth, start = list(a = 6.8, b = 1.1  ))
summary(model)
plot(model)
coef_est <- coef(model)
cov_matrix <- vcov(model)
long_data$predicted <- predict(model)
coef_est <- coef(model)
cov_matrix <- vcov(model)
# Calculate standard errors for predictions
growth$predicted <- predict(model)
se_pred <- numeric(length(growth$predicted))
for (i in 1:length(growth$predicted)) {
x_val <- growth$record[i]
# Jacobian for the prediction
jacobian <- c(x_val^coef_est["b"], coef_est["a"] * log(x_val) * x_val^coef_est["b"])
se_pred[i] <- sqrt(t(jacobian) %*% cov_matrix %*% jacobian)
}
growth$predicted <- predict(model)
se_pred <- numeric(length(growth$predicted))
for (i in 1:length(growth$predicted)) {
x_val <- growth$length.mm[i]
# Jacobian for the prediction
jacobian <- c(x_val^coef_est["b"], coef_est["a"] * log(x_val) * x_val^coef_est["b"])
se_pred[i] <- sqrt(t(jacobian) %*% cov_matrix %*% jacobian)
}
# Calculate the confidence intervals
alpha <- 0.05  # significance level for 95% CI
z_value <- qnorm(1 - alpha / 2)  # Z value for the normal distribution
# Compute confidence intervals
growth$lower_ci <- growth$predicted - z_value * se_pred
growth$upper_ci <- growth$predicted + z_value * se_pred
ggplot(growth, aes(x = length.mm, y = log(volume))) +
geom_point(color = "blue", size = 2) +
geom_line(aes(y = predicted), color = "red", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci),alpha = 0.2, fill = "purple")+
labs(x = "length",
y = "volume") +
theme_classic()
summary(model)
library(aomisc)
install.packages("aomisc")
library(aomisc)
install.packages("aomisc")
install.packages("modelr")
install.packages("modelr")
library(modelr)
modelr::rsquare(model, growth)
plot(model)
ggplot(growth, aes(x = log(volume), y = predicted)) +
geom_point(color = "blue", size = 2) +  +
labs(x = "Log volume",
y = "Predicted log volume") +
theme_classic()
model <- nls(log(volume) ~ a*length.mm^b, data = growth, start = list(a = 6.8, b = 1.1  ))
summary(model)
modelr::rsquare(model, growth)
plot(model)
growth$predicted <- predict(model)
ggplot(growth, aes(x = log(volume), y = predicted)) +
geom_point(color = "blue", size = 2) +  +
labs(x = "Log volume",
y = "Predicted log volume") +
theme_classic()
ggplot(growth, aes(x = log(volume), y = predicted)) +
geom_point(color = "blue", size = 2) +
labs(x = "Log volume",
y = "Predicted log volume") +
theme_classic()
