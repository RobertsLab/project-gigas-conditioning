scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH <- ggplot(means_D_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
theme(legend.position = "none")
ylim(0,50)
grid.arrange(DL,DW,DH)
DL <- ggplot(means_D_sizes, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW <- ggplot(means_D_sizes, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH <- ggplot(means_D_sizes, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,50)
grid.arrange(DL,DW,DH)
BL2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean length (mm)") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
theme_classic()+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
labs(color = "Conditioning")+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BW2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
labs(x = "Date",
y = "Mean width (mm)") +
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme_classic()+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,45)
BH2 <- ggplot(means_B_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point(size=3) +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
theme_classic()+
ylim(0,20)
grid.arrange(BL2,BW2,BH2)
DL2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_length, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean length (mm)") +
labs(color = "Conditioning")+
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
geom_errorbar(aes(ymin=mean_length-stderr_length, ymax = mean_length+stderr_length), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DW2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_width, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean width (mm)") +
theme_classic()+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_width-stderr_width, ymax = mean_width+stderr_width), width=.2,
position=position_dodge(0.05))+
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank())+
ylim(0,50)
DH2 <- ggplot(means_D_sizes_noNT, aes(x = date, y = mean_height, color = conditioning)) +
geom_point() +
labs(x = "Date",
y = "Mean height (mm)") +
labs(color = "Conditioning")+
theme_classic()+
geom_errorbar(aes(ymin=mean_height-stderr_height, ymax = mean_height+stderr_height), width=.2,
position=position_dodge(0.05))+
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
ylim(0,20)
grid.arrange(DL2,DW2,DH2)
# B survival
B_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/B_survival_09122024.xlsx")
# D survival
D_survival <- read_excel("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/survival/Westcott/D_survival_09122024.xlsx")
means_B_live <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_D_live <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_survival = mean(alive_num),
std_error = sd(alive_num)/sqrt(length(alive_num)),
.groups = 'drop')
means_live <- rbind(means_B_live, means_D_live)
means_live$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_live$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_live, aes(x = date, y = mean_survival, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean live oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_survival-std_error, ymax=mean_survival+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
ggplot(D_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0, size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Weekly"), values = c("green","purple"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,120)
ggplot(B_survival, aes(x = date, y = alive_num, group = effort, color = conditioning)) +
geom_jitter(width = 10, height = 0,size=3) +
labs(x = "Date",
y = "Live oysters per bag") +
scale_color_manual(labels = c("Control", "Daily"), values = c("blue","red"))+
labs(color = "Conditioning")+
theme_classic()+
ylim(0,55)
ggplot(B_survival, aes(x=date,y=dead, color=conditioning))+
geom_jitter(width = 0.2, height = 0.2, size = 3) +
theme_classic()+
ylab("Dead oysters found")+
xlab("Date")
B_survival <- B_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
D_survival <- D_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
B_survival <- B_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
D_survival <- D_survival %>%
group_by(conditioning, bag_num) %>%
arrange(date)%>%
mutate(cumulative_deaths = cumsum(dead)) %>%
ungroup()
ggplot(B_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.3) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))+
ylim(-0.5,6)
ggplot(D_survival, aes(x=date, y=cumulative_deaths, color=conditioning))+
geom_jitter(height = 0.2) +
theme_classic()+
ylab("Cumulative dead oysters found")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
means_B_cumdead <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_D_cumdead <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_cumdead <- rbind(means_B_cumdead, means_D_cumdead)
means_cumdead$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_B_cumdead <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_D_cumdead <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_cumdead = mean(cumulative_deaths),
std_error = sd(cumulative_deaths)/sqrt(length(cumulative_deaths)),
.groups = 'drop')
means_cumdead <- rbind(means_B_cumdead, means_D_cumdead)
means_cumdead$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_cumdead$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_cumdead, aes(x = date, y = mean_cumdead, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean cumulative dead oysters per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_cumdead-std_error, ymax=mean_cumdead+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
initial_counts <- B_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
B_survival <- B_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
B_survival <- B_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
initial_counts <- D_survival %>%
group_by(conditioning, bag_num) %>%
summarize(initial_count = first(alive_num)) %>%
ungroup()
# Join the initial counts back to the original dataframe
D_survival <- D_survival %>%
left_join(initial_counts, by = c("conditioning", "bag_num"))
# Calculate the proportion of organisms remaining alive at each timepoint
D_survival <- D_survival %>%
mutate(proportion_remaining = alive_num / initial_count)
means_B_prop <- B_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_D_prop <- D_survival %>%
group_by(conditioning, date) %>%
summarise(mean_prop = mean(proportion_remaining),
std_error = sd(proportion_remaining)/sqrt(length(proportion_remaining)),
.groups = 'drop')
means_prop <- rbind(means_B_prop, means_D_prop)
means_prop$effort <- c("B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D")
means_prop$conditioning <- c("d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","d_control","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","daily","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","w_control","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly","weekly")
ggplot(means_prop, aes(x = date, y = mean_prop, group = effort, color = conditioning)) +
geom_point(size=3) +
labs(x = "Date",
y = "Mean proportion of oysters remaining per bag") +
scale_color_manual(labels = c("Daily Control", "Daily", "Weekly Control", "Weekly"), values = c("blue", "red", "green", "purple"))+
labs(color = "Conditioning")+
geom_errorbar(aes(ymin=mean_prop-std_error, ymax=mean_prop+std_error), width=.2,
position=position_dodge(0.05))+
theme_classic()
ggplot(D_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color= "Conditioning")+
scale_color_manual(labels = c("Control", "Weekly"),values = c("green", "purple"))
ggplot(B_survival, aes(x=date, y=proportion_remaining, color=conditioning))+
geom_jitter() +
theme_classic()+
ylab("Proportion of oysters remaining")+
xlab("Date")+
labs(color = "Conditioning")+
scale_color_manual(labels = c("Control", "Daily"),values = c("blue", "red"))
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# B survival
B_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/B_2023POGS_small_seed_daily/B_sizes_09132024.xlsx")
# Heights from bag 2 for 07/05/2024 showing up as NA's for some reason when data imported
B_growth$length.mm <- as.numeric(B_growth$length.mm)
B_growth$width.mm <- as.numeric(B_growth$width.mm)
B_growth$height.mm <- as.numeric(B_growth$height.mm)
B_growth <- B_growth %>% drop_na(length.mm, width.mm, height.mm)
# D survival
D_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/D_2023POGS_small_seed_weekly/D_sizes_09132024.xlsx")
D_growth <- D_growth %>% drop_na(length.mm, width.mm, height.mm)
View(B_growth)
View(D_growth)
# Linear model with date as a continuous variable
model <- lm(length.mm ~ width.mm + height.mm + date_numeric, data = D_growth)
D_growth$date <- as.numeric(as.Date(D_growth$date))
# Linear model with date as a continuous variable
model <- lm(length.mm ~ width.mm + height.mm + date_numeric, data = D_growth)
# B survival
B_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/B_2023POGS_small_seed_daily/B_sizes_09132024.xlsx")
# Heights from bag 2 for 07/05/2024 showing up as NA's for some reason when data imported
B_growth$length.mm <- as.numeric(B_growth$length.mm)
B_growth$width.mm <- as.numeric(B_growth$width.mm)
B_growth$height.mm <- as.numeric(B_growth$height.mm)
B_growth <- B_growth %>% drop_na(length.mm, width.mm, height.mm)
# D survival
D_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/D_2023POGS_small_seed_weekly/D_sizes_09132024.xlsx")
D_growth <- D_growth %>% drop_na(length.mm, width.mm, height.mm)
D_growth$date_numeric <- as.numeric(as.Date(D_growth$date))
# Linear model with date as a continuous variable
model <- lm(length.mm ~ width.mm + height.mm + date_numeric, data = D_growth)
summary(model)
D_growth$date_factor <- as.factor(D_growth$date))
D_growth$date_factor <- as.factor(D_growth$date)
model2 <- lm(length.mm ~ width.mm + height.mm + date_factor, data = D_growth)
summary(model2)
model2$residuals
plot(model2$fitted.values, model2$residuals,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
plot(model2$fitted.values, model2$residuals,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
plot(df$width, model$residuals,
xlab = "Width",
ylab = "Residuals",
main = "Residuals vs Width")
qqnorm(model2$residuals)
qqline(model2$residuals, col = "red")
qqnorm(model2$residuals)
qqline(model2$residuals, col = "red")
plot(model$fitted.values, model$residuals,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
plot(D_growth$width, model2$residuals,
xlab = "Width",
ylab = "Residuals",
main = "Residuals vs Width")
plot(D_growth$width, model2$residuals,
xlab = "Width",
ylab = "Residuals",
main = "Residuals vs Width")
plot(D_growth$height, model2$residuals,
xlab = "Height",
ylab = "Residuals",
main = "Residuals vs Height")
plot(model, which = 3)
cooksd <- cooks.distance(model)
# Identify points with high Cook's distance (e.g., greater than 4/n where n is the number of observations)
outliers_cooks <- which(cooksd > 4 / nrow(D_growth))
D_growth[outliers_cooks, ]
print(D_growth[outliers_cooks, ])
D_growth_PCA <- subset(D_growth, select = c(length.mm, width.mm, height.mm))
View(D_growth_PCA)
pca_result <- prcomp(D_growth_PCA, scale. = TRUE)
biplot(pca_result)
pca_data <- as.data.frame(pca_result$x)
# Create a scatter plot of the first two principal components
library(ggplot2)
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point() +
labs(title = "PCA: Length, Width, and Height", x = "PC1", y = "PC2") +
theme_minimal()
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point() +
labs(title = "PCA: Length, Width, and Height", x = "PC1", y = "PC2") +
theme_minimal()+
stat_ellipse()
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point() +
labs(title = "PCA: Length, Width, and Height", x = "PC1", y = "PC2") +
theme_minimal()+
stat_ellipse()
biplot(pca_result)
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point() +
labs(title = "PCA: Length, Width, and Height", x = "PC1", y = "PC2") +
theme_minimal()+
stat_ellipse()
pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_result$rotation
scree_values <- pca_result$sdev^2
plot(scree_values, type = "b", xlab = "Principal Component", ylab = "Eigenvalue"
scree_values <- pca_result$sdev^2
scree_values <- pca_result$sdev^2
plot(scree_values, type = "b", xlab = "Principal Component", ylab = "Eigenvalue", main = "Scree Plot")
model <- lm(length.mm ~ width.mm + height.mm + date_numeric + conditioning, data = D_growth)
summary(model)
D_growth$date_factor <- as.factor(D_growth$date)
model2 <- lm(length.mm ~ width.mm + height.mm + date_factor+conditioning, data = D_growth)
summary(model2)
plot(model$fitted.values, model$residuals,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
plot(model, which = 3)
```{r}
ggplot(B_growth, aes(x=length.mm, y= height.mm))+
geom_point()+
theme_classic()
ggplot(B_growth, aes(x=length.mm, y= width.mm))+
geom_point()+
theme_classic()
ggplot(B_growth, aes(x=height.mm, y= width.mm))+
geom_point()+
theme_classic()
ggplot(D_growth, aes(x=length.mm, y= height.mm))+
geom_point()+
theme_classic()
ggplot(D_growth, aes(x=length.mm, y= width.mm))+
geom_point()+
theme_classic()
ggplot(D_growth, aes(x=width.mm, y= height.mm))+
geom_point()+
theme_classic()
D_growth <- D_growth[D_growth$width.mm != 82, ]
ggplot(D_growth, aes(x=length.mm, y= width.mm))+
geom_point()+
theme_classic()
ggplot(D_growth, aes(x=width.mm, y= height.mm))+
geom_point()+
theme_classic()
hist(B_growth$length.mm)
hist(B_growth$height.mm)
hist(B_growth$height.mm)
hist(B_growth$width.mm)
hist(D_growth$length.mm)
hist(D_growth$height.mm)
hist(D_growth$width.mm)
B_growth$lengthsqrt <- sqrt(B_growth$length.mm)
hist(B_growth$lengthsqrt)
B_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/B_2023POGS_small_seed_daily/B_sizes_09132024.xlsx")
# Heights from bag 2 for 07/05/2024 showing up as NA's for some reason when data imported
B_growth$length.mm <- as.numeric(B_growth$length.mm)
B_growth$width.mm <- as.numeric(B_growth$width.mm)
B_growth$height.mm <- as.numeric(B_growth$height.mm)
B_growth <- B_growth %>% drop_na(length.mm, width.mm, height.mm)
### B
```{r}
hist(B_growth$length.mm)
B_growth$log_length <- log(B_growth$length.mm)
hist(B_growth$log_length)
B_growth$log_height <- log(B_growth$height.mm)
hist(B_growth$log_height)
hist(B_growth$width.mm)
B_growth$log_width <- log(B_growth$width.mm)
hist(B_growth$log_width)
D_growth$log_length <- log(D_growth$length.mm)
hist(D_growth$log_length)
hist(D_growth$length.mm)
hist(B_growth$width.mm)
hist(B_growth$height.mm)
hist(B_growth$length.mm)
growth <- rbind(B_growth, D_growth)
# B survival
B_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/B_2023POGS_small_seed_daily/B_sizes_09132024.xlsx")
# Heights from bag 2 for 07/05/2024 showing up as NA's for some reason when data imported
B_growth$length.mm <- as.numeric(B_growth$length.mm)
B_growth$width.mm <- as.numeric(B_growth$width.mm)
B_growth$height.mm <- as.numeric(B_growth$height.mm)
B_growth <- B_growth %>% drop_na(length.mm, width.mm, height.mm)
# D survival
D_growth <- read_xlsx("/Users/graceleuchtenberger/Library/Mobile Documents/com~apple~CloudDocs/Documents/project-gigas-conditioning-GL/data/sizes/D_2023POGS_small_seed_weekly/D_sizes_09132024.xlsx")
D_growth <- D_growth %>% drop_na(length.mm, width.mm, height.mm)
growth <- rbind(B_growth, D_growth)
View(growth)
growth$date_numeric <-  as.numeric(as.Date(growth$date))
# Linear model with date as a continuous variable
model <- lm(length.mm ~ width.mm + height.mm + date_numeric + effort/conditioning, data = growth)
summary(model)
plot(model$fitted.values, model$residuals,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(model$residuals)
qqline(model$residuals, col = "red")
